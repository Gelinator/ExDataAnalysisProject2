my_div
swirl()
?complete.case
?complete.cases
swirl()
library(swirl)
swirl
library(swirl)
swirl
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
play()
list.files()
nxt()
list.files()
?list.files
play()
?args
args(list.files)
args(list.files())
nxt()
args(list.files)
old.dir <- getwd()
play()
?dir.create
?mkdir
??mkdir
dir.create("/Users/davegelinas/testdir")
nxt()
dir.create("/Users/davegelinas/testdir")
dir.create("testdir")
setwd("/Users/davegelinas/testdir")
setwd("testdir")
play()
setwd("/Users/davegelinas/")
nxt()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
ls()
file.exists("mytest.R")
info("mytest.R")
nxt()
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
file.info("mytest3.R")$path
file.info("mytest3.R")
file.path("mytest3.R")
?getFullAbsolutePath()
getFullAbsolutePath("mytest3.R")
?normalizePath
?source
source("mytest3.R")
source
nxt()
getwd("mytest3.R")
getFullAbsolutePath("mytest3.R")
fasj
getwd()
file.path("mytest3.R")
dir.create("testdir2")
dir.create("testdir2/testdir3", recursive = TRUE)
play()
getwd
getwd()
ls()
list()
dir.list()
list.directory()
list.dir()
list.files()
setwd("testdir2")
getwd()
list.files()
setwd("testdir")
setwd(""/Users/davegelinas/testdir")
setwd("/Users/davegelinas/testdir")
unlink("testdir2")
nxt()
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
x + y
add2(2,3)
}
x + y
add2 <- function(x, y){
x + y
}
add2(2,3)
above <- function(x,n){
use <- x > n
x[use]
}
above(3,10)
above(3,1)
x <- 1:20
above(x,10)
library(mean)
mean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
}
mean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
mean(5)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(5, FALSE)
search()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
z<-4
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 10
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
library(swirl)
swirl
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=
6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Dave")
my_name <- c(my_char,"Dave")
my_name
paste(my_char,my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"),sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
## Return a matrix that is the inverse of 'x'
}
x = matrix(2,3)
x
x = matrix(2,3,3)
x
x = matrix(1:6,3,2)
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
## Return a matrix that is the inverse of 'x'
}
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
x <- makeCacheMatrix(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
my_matrix = matrix( c(1, 1, 2, 4, 1, 3, 2, 2, 1), nrow=3, ncol=3)
x$set(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
cachemean(makeVector(x = 1:1000000000))
my_matrix = matrix( 1:10000), nrow=100, ncol=100)
my_matrix = matrix( 1:10000, nrow=100, ncol=100)
View(my_matrix)
x$set(my_matrix)
x$get()
cacheSolve(x)
x <- makeCacheMatrix(my_matrix)
x <- makeCacheMatrix(my_matrix)
cacheSolve(x)
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
> x <- makeCacheMatrix(my_matrix)
> x$get()
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
x <- makeCacheMatrix(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
file <- system.file("tests", "DATA.gov_NGAP.xlsx", package = "xlsx")
dat <- read.xlsx(file, 1)
install.packages("manipulate")
library(XML)
URL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(URL,useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[2]][[1]]
rootNode[[2]][[1]],rootNode[[2]][[2]]
c(rootNode[[2]][[1]],rootNode[[2]][[2]])
xmlSApply(rootNode,xmlValue)
library(swirl)
Dave
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, prob=c(0.3,0.7))
sample(c(0,1),100, prob=c(0.3,0.7),replace=TRUE)
flips <- sample(c(0,1),100, prob=c(0.3,0.7),replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
library(ggplot2)
getData <- function() {
if(!file.exists("data")){dir.create("data")}
if(file.exists('data/short.csv')) {
# if a shortcut exists just load the subset and prepare data
data<-read.csv("./data/short.csv")
data$Date<-as.Date(data$Date)
data$Time<-strptime(paste(data$Date, data$Time),
"%Y-%m-%d %H:%M:%S")
} else {
# if the original file is not available yet, download and unzip
if(!file.exists('data/household_power_consumption.txt')) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,
destfile="./data/power.zip",
method="curl")
dateDownloaded <- date()
unzip("./data/power.zip", exdir="./data/")
}
# read the data, convert to correct classes, and subset
data<-read.csv("./data/household_power_consumption.txt",
sep=";", na.strings = "?")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data<-data[data$Date>=as.Date("2007-02-01") &
data$Date<=as.Date("2007-02-02"),]
# store subset for later use
write.csv(data, "./data/short.csv")
# convert to correct classes
data$Time<-strptime(paste(data$Date, data$Time),
"%Y-%m-%d %H:%M:%S")
}
return(data)
}
?cbind
class(cbind)
cbind
?pass
?skip
getwd
getwd()
setwd("/Users/davegelinas/GitHub/ExploratoryAssignment2")
source("plot1.R","plot2.R","plot3.R","plot4.R","plot5.R","plot6.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
plot1()
plot2
plot2()
source("plot1.R")
source("plot2.R")
plot2()
plot1()
plot3()
plot4()
plot5()
source("plot6.R")
plot6()
?qplot
source("plot6.R")
plot6()
source("plot6.R")
plot6()
source("plot6.R")
plot6()
?qplot
