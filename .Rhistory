g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
z<-4
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 10
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
library(swirl)
swirl
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=
6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Dave")
my_name <- c(my_char,"Dave")
my_name
paste(my_char,my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"),sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
## Return a matrix that is the inverse of 'x'
}
x = matrix(2,3)
x
x = matrix(2,3,3)
x
x = matrix(1:6,3,2)
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
## Return a matrix that is the inverse of 'x'
}
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
x <- makeCacheMatrix(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
my_matrix = matrix( c(1, 1, 2, 4, 1, 3, 2, 2, 1), nrow=3, ncol=3)
x$set(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
cachemean(makeVector(x = 1:1000000000))
my_matrix = matrix( 1:10000), nrow=100, ncol=100)
my_matrix = matrix( 1:10000, nrow=100, ncol=100)
View(my_matrix)
x$set(my_matrix)
x$get()
cacheSolve(x)
x <- makeCacheMatrix(my_matrix)
x <- makeCacheMatrix(my_matrix)
cacheSolve(x)
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
> x <- makeCacheMatrix(my_matrix)
> x$get()
my_matrix = matrix( c(1, 1, 3, 1), nrow=2, ncol=2)
x <- makeCacheMatrix(my_matrix)
x$get()
cacheSolve(x)
cacheSolve(x)
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
file <- system.file("tests", "DATA.gov_NGAP.xlsx", package = "xlsx")
dat <- read.xlsx(file, 1)
install.packages("manipulate")
library(XML)
URL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(URL,useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[2]][[1]]
rootNode[[2]][[1]],rootNode[[2]][[2]]
c(rootNode[[2]][[1]],rootNode[[2]][[2]])
xmlSApply(rootNode,xmlValue)
library(swirl)
Dave
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, prob=c(0.3,0.7))
sample(c(0,1),100, prob=c(0.3,0.7),replace=TRUE)
flips <- sample(c(0,1),100, prob=c(0.3,0.7),replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
library(ggplot2)
getData <- function() {
if(!file.exists("data")){dir.create("data")}
if(file.exists('data/short.csv')) {
# if a shortcut exists just load the subset and prepare data
data<-read.csv("./data/short.csv")
data$Date<-as.Date(data$Date)
data$Time<-strptime(paste(data$Date, data$Time),
"%Y-%m-%d %H:%M:%S")
} else {
# if the original file is not available yet, download and unzip
if(!file.exists('data/household_power_consumption.txt')) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,
destfile="./data/power.zip",
method="curl")
dateDownloaded <- date()
unzip("./data/power.zip", exdir="./data/")
}
# read the data, convert to correct classes, and subset
data<-read.csv("./data/household_power_consumption.txt",
sep=";", na.strings = "?")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data<-data[data$Date>=as.Date("2007-02-01") &
data$Date<=as.Date("2007-02-02"),]
# store subset for later use
write.csv(data, "./data/short.csv")
# convert to correct classes
data$Time<-strptime(paste(data$Date, data$Time),
"%Y-%m-%d %H:%M:%S")
}
return(data)
}
?cbind
class(cbind)
cbind
?pass
?skip
getwd
getwd()
setwd("/Users/davegelinas/GitHub/ExploratoryAssignment2")
source("plot1.R","plot2.R","plot3.R","plot4.R","plot5.R","plot6.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
plot1()
plot2
plot2()
source("plot1.R")
source("plot2.R")
plot2()
plot1()
plot3()
plot4()
plot5()
source("plot6.R")
plot6()
?qplot
source("plot6.R")
plot6()
source("plot6.R")
plot6()
source("plot6.R")
plot6()
?qplot
source("plot1.R")
plot1()
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
plot2()
plot3()
plot4()
plot5()
plot6()
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
plot4()
plot5()
plot6()
# Function that builds the plot3.
#The default working directory will be the current working directory. Any other can be specified
plot3 <- function(wd=getwd()){
#setting the working directory
setwd(wd)
#loading ggplot2 package
library(ggplot2)
#specifying the zip file name
name <- "NEI_data.zip"
#The function building the graphic
grapher <- function(){
#Creates a subset of the data for the Baltimore City area
Baltimore <- subset(NEI,NEI$fips == "24510")
#sums the total emmissions by year, then by type for the Baltimore City area observations
EmissionsByYearType <- aggregate(Baltimore$Emissions, by = list(Baltimore$year,Baltimore$type), FUN=sum)
#renaming the column names for good measure
names(EmissionsByYearType) <- c("Year", "Type", "Emissions")
#preparing the png file
png(filename = "Plot3.png",
width = 1000, height = 1000,bg="transparent")
#plotting it!
print(qplot(Year, Emissions, data=EmissionsByYearType, color=Type,
geom = c("line","point"), ylab="Emissions (tons)",
xlab = "Year", main = "Total emissions per type, by year in Baltimore City"))
#finishing off
dev.off()
}
#Verifying if the data is in the Global Environment. If true, puts it through
#the grapher function. Those two objects will be cached in the Global Environment if
#any other code from this serie has previously been used.
if (exists("NEI") == TRUE & exists("SCC")== TRUE){
grapher()
}
#If not found in Global Environment, verifies if unzipped files exist in current working directory.
#If true, they will be loaded in the Global Environment.
else if (file.exists("summarySCC_PM25.rds")==TRUE &
file.exists("Source_Classification_Code.rds")==TRUE){
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
#If unzipped files not found in current working directory, looking if zip file present in current working directory.
#If true, unzips it and extracts the two data files then loads them in Global Environment.
else if (file.exists(name)==TRUE){
unz(name, c("summarySCC_PM25.rds","Source_Classification_Code.rds"))
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
#If none of the above is true, downloads the zip file, unzips it and loads it in the Global Environment.
#Then runs it through the grapher function to produce the graph.
else {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",
destfile=name, method="curl")
unzip(name, c("summarySCC_PM25.rds","Source_Classification_Code.rds"))
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
}
plot3()
# Function that builds the plot5.
#The default working directory will be the current working directory. Any other can be specified
plot5 <- function(wd=getwd()){
#setting the working directory
setwd(wd)
#specifying the zip file name
name <- "NEI_data.zip"
#The function building the graphic
grapher <- function(){
#creates a list in the Global Environment to later be used in the for loop
all_lines <- list()
#Creates a subset of the NEI dataset to keep solely the Baltimore City area observations
Baltimore <- subset(NEI,NEI$fips == "24510")
#for loop built to iterate through a list of words refering to motorized vehicles.
#On each loop cycle, it goes through all the observations to find
#vehicle related SCC codes description and stores them in all_lines
#A complete list is then built and duplicates removed
for (i in c("vehicle","car","truck","buses","moto","mowers")){
ShortName <- grep(i,SCC$Short.Name, ignore.case=TRUE)
EISector <- grep(i,SCC$EI.Sector, ignore.case=TRUE)
LevelThree <- grep(i,SCC$SCC.Level.Three, ignore.case=TRUE)
LevelFour <- grep(i,SCC$SCC.Level.Four, ignore.case=TRUE)
all_lines <- sort(unlist(unique(c(all_lines, ShortName, EISector, LevelFour, LevelThree))))
}
#subsetting the SCC description file to keep solely the vehicle related lines
rollers <- SCC[all_lines,]
#listing the relevant SCC codes
SCCcodes <- rollers$SCC
#subsetting the NEI dataset with the relevant SCC codes to keep vehicle related ones
vehiclesBaltimore <- subset(Baltimore, (Baltimore$SCC %in% SCCcodes))
#creates a list of all the vehicles related observations' year
years <- list(vehiclesBaltimore$year)
#sums the total emmissions by year for the vehicle related observations in the Baltimore City area
EmissionsByYear <- aggregate(vehiclesBaltimore$Emissions, by = years, FUN=sum)
#preparing the png file
png(filename = "Plot5.png",
width = 1000, height = 1000,bg="transparent")
#plotting it!
plot(EmissionsByYear, type = "b", ylab = "Emissions (tons)", xlab= "Year",
main = "Total Emissions from Motorized Vehicles per Year in Baltimore City",xaxt = "n", col = "blue")
#marking the observation years as X labels
axis(1,at= c(1999,2002,2005,2008),labels = c(1999,2002,2005,2008))
#finishing off
dev.off()
}
#Verifying if the data is in the Global Environment. If true, puts it through
#the grapher function. Those two objects will be cached in the Global Environment if
#any other code from this serie has previously been used.
if (exists("NEI") == TRUE & exists("SCC")== TRUE){
grapher()
}
#If not found in Global Environment, verifies if unzipped files exist in current working directory.
#If true, they will be loaded in the Global Environment.
else if (file.exists("summarySCC_PM25.rds")==TRUE &
file.exists("Source_Classification_Code.rds")==TRUE){
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
#If unzipped files not found in current working directory, looking if zip file present in current working directory.
#If true, unzips it and extracts the two data files then loads them in Global Environment.
else if (file.exists(name)==TRUE){
unz(name, c("summarySCC_PM25.rds","Source_Classification_Code.rds"))
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
#If none of the above is true, downloads the zip file, unzips it and loads it in the Global Environment.
#Then runs it through the grapher function to produce the graph.
else {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",
destfile=name, method="curl")
unzip(name, c("summarySCC_PM25.rds","Source_Classification_Code.rds"))
NEI <<- readRDS("summarySCC_PM25.rds")
SCC <<- readRDS("Source_Classification_Code.rds")
grapher()
}
}
plot5()
